{
  "version": 3,
  "sources": ["../../react-table-plugins/src/aggregations.js", "../../react-table-plugins/src/utils.js", "../../react-table-plugins/src/plugins/useColumnSummary.js", "../../react-table-plugins/src/plugins/useExportData.js", "../../react-table-plugins/src/plugins/useCellRangeSelection.js"],
  "sourcesContent": ["export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return (aggregatedValues || values).reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n", "export function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== \"undefined\") {\n      return args[i];\n    }\n  }\n}\n", "import React from \"react\";\n\nimport { actions, functionalUpdate } from \"react-table\";\n\nimport * as aggregations from \"../aggregations\";\nimport { getFirstDefined } from \"../utils\";\n\n// Actions\nactions.resetColumnSummary = \"resetColumnSummary\";\nactions.setColumnSummary = \"setColumnSummary\";\n\nexport const useColumnSummary = (hooks) => {\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n};\n\nuseColumnSummary.pluginName = \"useColumnSummary\";\n\nconst defaultUserColumnSummaryFns = {};\nconst defaultColumnSummaryFn = \"count\";\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnSummary: {},\n      ...state,\n    };\n  }\n\n  if (action.type === actions.resetColumnSummary) {\n    return {\n      ...state,\n      columnSummary: instance.initialState.columnSummary || {},\n    };\n  }\n\n  if (action.type === actions.setColumnSummary) {\n    return {\n      ...state,\n      columnSummary: functionalUpdate(\n        action.columnSummary,\n        state.columnSummary\n      ),\n    };\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    state: { columnSummary },\n    allColumns,\n    rows,\n    columnSummaryFns: userColumnSummaryFns = defaultUserColumnSummaryFns,\n    dispatch,\n    disableColumnSummary,\n  } = instance;\n\n  const setColumnSummary = React.useCallback(\n    (columnSummary) => {\n      return dispatch({ type: actions.setColumnSummary, columnSummary });\n    },\n    [dispatch]\n  );\n\n  React.useMemo(() => {\n    allColumns.forEach((column) => {\n      const { id, accessor, columnSummaryFn = defaultColumnSummaryFn } = column;\n\n      // Determine if a column has summary\n      column.hasColumnSummary = accessor\n        ? getFirstDefined(\n            column.disableColumnSummary === true ? false : undefined,\n            disableColumnSummary === true ? false : undefined,\n            true\n          )\n        : false;\n\n      let columnSummaryType = columnSummary[id] || columnSummaryFn;\n\n      let summaryFn =\n        typeof columnSummaryType === \"function\"\n          ? columnSummaryType\n          : userColumnSummaryFns[columnSummaryType] ||\n            aggregations[columnSummaryType];\n\n      let columnSummaryValue = null;\n\n      if (summaryFn) {\n        columnSummaryValue = summaryFn(rows.map((d) => d.values[column.id]));\n      } else if (columnSummaryType) {\n        console.info({ column });\n        throw new Error(\n          `React Table: Invalid columnSummary function provided for column listed above`\n        );\n      }\n\n      column.columnSummary = {\n        type: columnSummaryType,\n        value: columnSummaryValue,\n      };\n\n      // console.log(column);\n\n      column.setColumnSummary = (data) => {\n        setColumnSummary({ ...columnSummary, [id]: data });\n      };\n    });\n  }, [\n    allColumns,\n    setColumnSummary,\n    columnSummary,\n    userColumnSummaryFns,\n    rows,\n    disableColumnSummary,\n  ]);\n\n  Object.assign(instance, {\n    setColumnSummary,\n  });\n}\n", "import React from \"react\";\nimport { ensurePluginOrder } from \"react-table\";\n\nimport { getFirstDefined } from \"../utils\";\n\n// Get exported file name(do not specify extension here)\nconst defaultGetExportFileName = ({ fileType, all }) => {\n  return `${all ? \"all-\" : \"\"}data`;\n};\n\n// To get column name while exporting\nconst defaultGetColumnExportValue = (col) => {\n  let name = col.Header;\n  if (typeof name === \"object\" || typeof name === \"function\") {\n    name = col.id;\n  }\n  return name;\n};\n\n// To get cell value while exporting\nconst defaultGetCellExportValue = (row, col) => {\n  return row.values[col.id];\n};\n\nconst defaultGetExportFileBlob = () => {\n  throw new Error(\"React Table: Export Blob is mandatory\");\n};\n\nexport const useExportData = (hooks) => {\n  hooks.useInstance.push(useInstance);\n};\n\nuseExportData.pluginName = \"useExportData\";\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    initialRows = [],\n    allColumns,\n    disableExport,\n    getExportFileName = defaultGetExportFileName,\n    getExportFileBlob = defaultGetExportFileBlob,\n    plugins,\n  } = instance;\n\n  ensurePluginOrder(\n    plugins,\n    [\"useColumnOrder\", \"useColumnVisibility\", \"useFilters\", \"useSortBy\"],\n    \"useExportData\"\n  );\n\n  // Adding `canExport` & `exportValue` meta data\n  allColumns.forEach((column) => {\n    const {\n      accessor,\n      getColumnExportValue = defaultGetColumnExportValue,\n    } = column;\n\n    const canExport = accessor\n      ? getFirstDefined(\n          column.disableExport === true ? false : undefined,\n          disableExport === true ? false : undefined,\n          true\n        )\n      : false;\n\n    column.canExport = canExport;\n    column.exportValue = getColumnExportValue(column);\n  });\n\n  // This method will enable export of data on `instance` object\n  const exportData = React.useCallback(\n    (fileType, all = false) => {\n      // Columns which are exportable\n      const exportableColumns = allColumns.filter(\n        (col) => col.canExport && (all || col.isVisible)\n      );\n\n      if (exportableColumns.length === 0) {\n        console.warn(\"No exportable columns are available\");\n      }\n\n      // Rows which are exportable\n      let exportableRows = (all ? initialRows : rows).map((row) => {\n        return exportableColumns.map((col) => {\n          const { getCellExportValue = defaultGetCellExportValue } = col;\n\n          return getCellExportValue(row, col);\n        });\n      });\n\n      // Getting fileName\n      const fileName = getExportFileName({ fileType, all });\n\n      // Get `FileBlob` to download\n      let fileBlob = getExportFileBlob({\n        columns: exportableColumns,\n        data: exportableRows,\n        fileName,\n        fileType,\n      });\n\n      // Trigger download in browser\n      if (fileBlob) {\n        downloadFileViaBlob(fileBlob, fileName, fileType);\n      }\n    },\n    [getExportFileBlob, getExportFileName, initialRows, rows, allColumns]\n  );\n\n  Object.assign(instance, {\n    exportData,\n  });\n}\n\nfunction downloadFileViaBlob(fileBlob, fileName, type) {\n  if (fileBlob) {\n    const dataUrl = URL.createObjectURL(fileBlob);\n    const link = document.createElement(\"a\");\n    link.download = `${fileName}.${type}`;\n    link.href = dataUrl;\n    link.click();\n  }\n}\n", "import React from 'react'\n\nimport { actions, makePropGetter, functionalUpdate } from 'react-table'\n\nactions.cellRangeSelectionStart = 'cellRangeSelectionStart'\nactions.cellRangeSelecting = 'cellRangeSelecting'\nactions.cellRangeSelectionEnd = 'cellRangeSelectionEnd'\nactions.setSelectedCellIds = 'setSelectedCellIds' // exposed to user on an instance\n\nexport const useCellRangeSelection = hooks => {\n  hooks.getCellRangeSelectionProps = [defaultgetCellRangeSelectionProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseCellRangeSelection.pluginName = 'useCellRangeSelection'\n\nconst defaultgetCellRangeSelectionProps = (props, { instance, cell }) => {\n  const {\n    state: { isSelectingCells },\n    dispatch\n  } = instance\n\n  // These actions are not exposed on an instance, as we provide setSelectedCells and getCellsBetweenId.\n  const start = (startCell, event) =>\n    dispatch({ type: actions.cellRangeSelectionStart, startCell, event })\n  const selecting = (selectingEndCell, event) =>\n    dispatch({ type: actions.cellRangeSelecting, selectingEndCell, event })\n  const end = (endCell, event) =>\n    dispatch({ type: actions.cellRangeSelectionEnd, endCell, event })\n\n  return [\n    props,\n    {\n      onMouseDown: e => {\n        e.persist() // event-pooling\n        start(cell.id, e)\n      },\n      onMouseUp: e => {\n        e.persist()\n        end(cell.id, e)\n      },\n      onMouseEnter: e => {\n        if (isSelectingCells) {\n          e.persist()\n          selecting(cell.id, e)\n        }\n      }\n    }\n  ]\n}\n\n// currentSelectedCellIds: Is for currently selected range\n// selectedCellIds: Contains all selected cells\n// On cellRangeSelectionEnd: we move currentSelectedCellIds to selectedCellIds\nfunction reducer (state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      ...state,\n      selectedCellIds: { ...instance.initialState.selectedCellIds } || {},\n      isSelectingCells: false,\n      startCellSelection: null,\n      endCellSelection: null,\n      currentSelectedCellIds: {}\n    }\n  }\n\n  if (action.type === actions.cellRangeSelectionStart) {\n    const { startCell, event } = action\n\n    let newState = Object.assign(state.selectedCellIds, {})\n    if (event.ctrlKey === true) {\n      if (newState[startCell]) {\n        delete newState[startCell]\n      } else {\n        newState[startCell] = true\n      }\n    } else {\n      newState = {}\n    }\n\n    return {\n      ...state,\n      selectedCellIds:\n        {\n          ...newState\n        } || {},\n      isSelectingCells: true,\n      startCellSelection: startCell\n    }\n  }\n\n  if (action.type === actions.cellRangeSelecting) {\n    const { selectingEndCell } = action\n    const {\n      state: { startCellSelection },\n      getCellsBetweenId\n    } = instance\n\n    // Get cells between cell ids (range)\n    let newState = getCellsBetweenId(startCellSelection, selectingEndCell)\n\n    return {\n      ...state,\n      endCellSelection: selectingEndCell,\n      currentSelectedCellIds: newState\n    }\n  }\n\n  if (action.type === actions.cellRangeSelectionEnd) {\n    const {\n      state: { selectedCellIds, currentSelectedCellIds }\n    } = instance\n\n    return {\n      ...state,\n      selectedCellIds: { ...selectedCellIds, ...currentSelectedCellIds },\n      isSelectingCells: false,\n      currentSelectedCellIds: {},\n      startCellSelection: null,\n      endCellSelection: null\n    }\n  }\n\n  if (action.type === actions.setSelectedCellIds) {\n    const selectedCellIds = functionalUpdate(\n      action.selectedCellIds,\n      state.selectedCellIds\n    )\n\n    return {\n      ...state,\n      selectedCellIds: selectedCellIds\n    }\n  }\n}\n\nfunction useInstance (instance) {\n  const { dispatch, allColumns, rows } = instance\n\n  const cellsById = {}\n  // make user control the cellIdSplitter\n  const defaultCellIdSplitBy = '_col_row_'\n  let cellIdSplitBy = instance.cellIdSplitBy || defaultCellIdSplitBy\n  Object.assign(instance, { cellIdSplitBy })\n\n  const setSelectedCellIds = React.useCallback(\n    selectedCellIds => {\n      return dispatch({\n        type: actions.setSelectedCellIds,\n        selectedCellIds\n      })\n    },\n    [dispatch]\n  )\n\n  // Returns all cells between Range ( between startcell and endcell Ids)\n  const getCellsBetweenId = React.useCallback(\n    (startCell, endCell) => {\n      if (!cellsById[startCell] || !cellsById[endCell]) {\n        console.info({ startCell, endCell })\n        throw new Error(\n          `React Table: startCellId and endCellId has to be valid cell Id`\n        )\n      }\n\n      // get rows and columns index boundaries\n      let rowsIndex = [\n        cellsById[startCell].row.index,\n        cellsById[endCell].row.index\n      ]\n      let columnsIndex = []\n      allColumns.forEach((col, index) => {\n        if (\n          col.id === cellsById[startCell].column.id ||\n          col.id === cellsById[endCell].column.id\n        ) {\n          columnsIndex.push(index)\n        }\n      })\n\n      // all selected rows and selected columns\n      const selectedColumns = []\n      const selectedRows = []\n      for (\n        let i = Math.min(...columnsIndex);\n        i <= Math.max(...columnsIndex);\n        i++\n      ) {\n        selectedColumns.push(allColumns[i].id)\n      }\n      for (let i = Math.min(...rowsIndex); i <= Math.max(...rowsIndex); i++) {\n        selectedRows.push(rows[i].id)\n      }\n\n      // select cells\n      const cellsBetween = {}\n      if (selectedRows.length && selectedColumns.length) {\n        for (let i = 0; i < selectedRows.length; i++) {\n          for (let j = 0; j < selectedColumns.length; j++) {\n            let id = selectedColumns[j] + cellIdSplitBy + selectedRows[i]\n            let cell = cellsById[id]\n            cellsBetween[cell.id] = true\n          }\n        }\n      }\n\n      return cellsBetween\n    },\n    [allColumns, cellsById, cellIdSplitBy, rows]\n  )\n\n  Object.assign(instance, {\n    getCellsBetweenId,\n    cellsById,\n    setSelectedCellIds\n  })\n}\n\nfunction prepareRow (\n  row,\n  { instance: { cellsById, cellIdSplitBy }, instance }\n) {\n  row.allCells.forEach(cell => {\n    cell.id = cell.column.id + cellIdSplitBy + row.id\n    cellsById[cell.id] = cell\n    cell.getCellRangeSelectionProps = makePropGetter(\n      instance.getHooks().getCellRangeSelectionProps,\n      { instance: instance, row, cell }\n    )\n  })\n}\n"],
  "mappings": "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",
  "names": ["sum", "values", "aggregatedValues", "reduce", "next", "min", "forEach", "value", "Math", "max", "minMax", "average", "length", "median", "unique", "Set", "uniqueCount", "size", "count", "getFirstDefined", "args", "i", "actions", "resetColumnSummary", "setColumnSummary", "useColumnSummary", "hooks", "stateReducers", "push", "reducer", "useInstance", "pluginName", "defaultUserColumnSummaryFns", "defaultColumnSummaryFn", "state", "action", "previousState", "instance", "type", "init", "columnSummary", "initialState", "functionalUpdate", "allColumns", "rows", "columnSummaryFns", "userColumnSummaryFns", "dispatch", "disableColumnSummary", "React", "useCallback", "useMemo", "column", "id", "accessor", "columnSummaryFn", "hasColumnSummary", "undefined", "columnSummaryType", "summaryFn", "aggregations", "columnSummaryValue", "map", "d", "console", "info", "Error", "data", "Object", "assign", "defaultGetExportFileName", "fileType", "all", "defaultGetColumnExportValue", "col", "name", "Header", "defaultGetCellExportValue", "row", "defaultGetExportFileBlob", "useExportData", "initialRows", "disableExport", "getExportFileName", "getExportFileBlob", "plugins", "ensurePluginOrder", "getColumnExportValue", "canExport", "exportValue", "exportData", "exportableColumns", "filter", "isVisible", "warn", "exportableRows", "getCellExportValue", "fileName", "fileBlob", "columns", "downloadFileViaBlob", "dataUrl", "URL", "createObjectURL", "link", "document", "createElement", "download", "href", "click", "cellRangeSelectionStart", "cellRangeSelecting", "cellRangeSelectionEnd", "setSelectedCellIds", "useCellRangeSelection", "getCellRangeSelectionProps", "defaultgetCellRangeSelectionProps", "prepareRow", "props", "cell", "isSelectingCells", "start", "startCell", "event", "selecting", "selectingEndCell", "end", "endCell", "onMouseDown", "e", "persist", "onMouseUp", "onMouseEnter", "selectedCellIds", "startCellSelection", "endCellSelection", "currentSelectedCellIds", "newState", "ctrlKey", "getCellsBetweenId", "cellsById", "defaultCellIdSplitBy", "cellIdSplitBy", "rowsIndex", "index", "columnsIndex", "selectedColumns", "selectedRows", "cellsBetween", "j", "allCells", "makePropGetter", "getHooks"]
}
