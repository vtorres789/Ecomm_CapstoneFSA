{"version":3,"file":"index.es.js","sources":["../src/aggregations.js","../src/utils.js","../src/plugins/useColumnSummary.js","../src/plugins/useExportData.js","../src/plugins/useCellRangeSelection.js"],"sourcesContent":["export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return (aggregatedValues || values).reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nexport function unique(values) {\n  return [...new Set(values).values()]\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","export function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== \"undefined\") {\n      return args[i];\n    }\n  }\n}\n","import React from \"react\";\n\nimport { actions, functionalUpdate } from \"react-table\";\n\nimport * as aggregations from \"../aggregations\";\nimport { getFirstDefined } from \"../utils\";\n\n// Actions\nactions.resetColumnSummary = \"resetColumnSummary\";\nactions.setColumnSummary = \"setColumnSummary\";\n\nexport const useColumnSummary = (hooks) => {\n  hooks.stateReducers.push(reducer);\n  hooks.useInstance.push(useInstance);\n};\n\nuseColumnSummary.pluginName = \"useColumnSummary\";\n\nconst defaultUserColumnSummaryFns = {};\nconst defaultColumnSummaryFn = \"count\";\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnSummary: {},\n      ...state,\n    };\n  }\n\n  if (action.type === actions.resetColumnSummary) {\n    return {\n      ...state,\n      columnSummary: instance.initialState.columnSummary || {},\n    };\n  }\n\n  if (action.type === actions.setColumnSummary) {\n    return {\n      ...state,\n      columnSummary: functionalUpdate(\n        action.columnSummary,\n        state.columnSummary\n      ),\n    };\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    state: { columnSummary },\n    allColumns,\n    rows,\n    columnSummaryFns: userColumnSummaryFns = defaultUserColumnSummaryFns,\n    dispatch,\n    disableColumnSummary,\n  } = instance;\n\n  const setColumnSummary = React.useCallback(\n    (columnSummary) => {\n      return dispatch({ type: actions.setColumnSummary, columnSummary });\n    },\n    [dispatch]\n  );\n\n  React.useMemo(() => {\n    allColumns.forEach((column) => {\n      const { id, accessor, columnSummaryFn = defaultColumnSummaryFn } = column;\n\n      // Determine if a column has summary\n      column.hasColumnSummary = accessor\n        ? getFirstDefined(\n            column.disableColumnSummary === true ? false : undefined,\n            disableColumnSummary === true ? false : undefined,\n            true\n          )\n        : false;\n\n      let columnSummaryType = columnSummary[id] || columnSummaryFn;\n\n      let summaryFn =\n        typeof columnSummaryType === \"function\"\n          ? columnSummaryType\n          : userColumnSummaryFns[columnSummaryType] ||\n            aggregations[columnSummaryType];\n\n      let columnSummaryValue = null;\n\n      if (summaryFn) {\n        columnSummaryValue = summaryFn(rows.map((d) => d.values[column.id]));\n      } else if (columnSummaryType) {\n        console.info({ column });\n        throw new Error(\n          `React Table: Invalid columnSummary function provided for column listed above`\n        );\n      }\n\n      column.columnSummary = {\n        type: columnSummaryType,\n        value: columnSummaryValue,\n      };\n\n      // console.log(column);\n\n      column.setColumnSummary = (data) => {\n        setColumnSummary({ ...columnSummary, [id]: data });\n      };\n    });\n  }, [\n    allColumns,\n    setColumnSummary,\n    columnSummary,\n    userColumnSummaryFns,\n    rows,\n    disableColumnSummary,\n  ]);\n\n  Object.assign(instance, {\n    setColumnSummary,\n  });\n}\n","import React from \"react\";\nimport { ensurePluginOrder } from \"react-table\";\n\nimport { getFirstDefined } from \"../utils\";\n\n// Get exported file name(do not specify extension here)\nconst defaultGetExportFileName = ({ fileType, all }) => {\n  return `${all ? \"all-\" : \"\"}data`;\n};\n\n// To get column name while exporting\nconst defaultGetColumnExportValue = (col) => {\n  let name = col.Header;\n  if (typeof name === \"object\" || typeof name === \"function\") {\n    name = col.id;\n  }\n  return name;\n};\n\n// To get cell value while exporting\nconst defaultGetCellExportValue = (row, col) => {\n  return row.values[col.id];\n};\n\nconst defaultGetExportFileBlob = () => {\n  throw new Error(\"React Table: Export Blob is mandatory\");\n};\n\nexport const useExportData = (hooks) => {\n  hooks.useInstance.push(useInstance);\n};\n\nuseExportData.pluginName = \"useExportData\";\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    initialRows = [],\n    allColumns,\n    disableExport,\n    getExportFileName = defaultGetExportFileName,\n    getExportFileBlob = defaultGetExportFileBlob,\n    plugins,\n  } = instance;\n\n  ensurePluginOrder(\n    plugins,\n    [\"useColumnOrder\", \"useColumnVisibility\", \"useFilters\", \"useSortBy\"],\n    \"useExportData\"\n  );\n\n  // Adding `canExport` & `exportValue` meta data\n  allColumns.forEach((column) => {\n    const {\n      accessor,\n      getColumnExportValue = defaultGetColumnExportValue,\n    } = column;\n\n    const canExport = accessor\n      ? getFirstDefined(\n          column.disableExport === true ? false : undefined,\n          disableExport === true ? false : undefined,\n          true\n        )\n      : false;\n\n    column.canExport = canExport;\n    column.exportValue = getColumnExportValue(column);\n  });\n\n  // This method will enable export of data on `instance` object\n  const exportData = React.useCallback(\n    (fileType, all = false) => {\n      // Columns which are exportable\n      const exportableColumns = allColumns.filter(\n        (col) => col.canExport && (all || col.isVisible)\n      );\n\n      if (exportableColumns.length === 0) {\n        console.warn(\"No exportable columns are available\");\n      }\n\n      // Rows which are exportable\n      let exportableRows = (all ? initialRows : rows).map((row) => {\n        return exportableColumns.map((col) => {\n          const { getCellExportValue = defaultGetCellExportValue } = col;\n\n          return getCellExportValue(row, col);\n        });\n      });\n\n      // Getting fileName\n      const fileName = getExportFileName({ fileType, all });\n\n      // Get `FileBlob` to download\n      let fileBlob = getExportFileBlob({\n        columns: exportableColumns,\n        data: exportableRows,\n        fileName,\n        fileType,\n      });\n\n      // Trigger download in browser\n      if (fileBlob) {\n        downloadFileViaBlob(fileBlob, fileName, fileType);\n      }\n    },\n    [getExportFileBlob, getExportFileName, initialRows, rows, allColumns]\n  );\n\n  Object.assign(instance, {\n    exportData,\n  });\n}\n\nfunction downloadFileViaBlob(fileBlob, fileName, type) {\n  if (fileBlob) {\n    const dataUrl = URL.createObjectURL(fileBlob);\n    const link = document.createElement(\"a\");\n    link.download = `${fileName}.${type}`;\n    link.href = dataUrl;\n    link.click();\n  }\n}\n","import React from 'react'\n\nimport { actions, makePropGetter, functionalUpdate } from 'react-table'\n\nactions.cellRangeSelectionStart = 'cellRangeSelectionStart'\nactions.cellRangeSelecting = 'cellRangeSelecting'\nactions.cellRangeSelectionEnd = 'cellRangeSelectionEnd'\nactions.setSelectedCellIds = 'setSelectedCellIds' // exposed to user on an instance\n\nexport const useCellRangeSelection = hooks => {\n  hooks.getCellRangeSelectionProps = [defaultgetCellRangeSelectionProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseCellRangeSelection.pluginName = 'useCellRangeSelection'\n\nconst defaultgetCellRangeSelectionProps = (props, { instance, cell }) => {\n  const {\n    state: { isSelectingCells },\n    dispatch\n  } = instance\n\n  // These actions are not exposed on an instance, as we provide setSelectedCells and getCellsBetweenId.\n  const start = (startCell, event) =>\n    dispatch({ type: actions.cellRangeSelectionStart, startCell, event })\n  const selecting = (selectingEndCell, event) =>\n    dispatch({ type: actions.cellRangeSelecting, selectingEndCell, event })\n  const end = (endCell, event) =>\n    dispatch({ type: actions.cellRangeSelectionEnd, endCell, event })\n\n  return [\n    props,\n    {\n      onMouseDown: e => {\n        e.persist() // event-pooling\n        start(cell.id, e)\n      },\n      onMouseUp: e => {\n        e.persist()\n        end(cell.id, e)\n      },\n      onMouseEnter: e => {\n        if (isSelectingCells) {\n          e.persist()\n          selecting(cell.id, e)\n        }\n      }\n    }\n  ]\n}\n\n// currentSelectedCellIds: Is for currently selected range\n// selectedCellIds: Contains all selected cells\n// On cellRangeSelectionEnd: we move currentSelectedCellIds to selectedCellIds\nfunction reducer (state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      ...state,\n      selectedCellIds: { ...instance.initialState.selectedCellIds } || {},\n      isSelectingCells: false,\n      startCellSelection: null,\n      endCellSelection: null,\n      currentSelectedCellIds: {}\n    }\n  }\n\n  if (action.type === actions.cellRangeSelectionStart) {\n    const { startCell, event } = action\n\n    let newState = Object.assign(state.selectedCellIds, {})\n    if (event.ctrlKey === true) {\n      if (newState[startCell]) {\n        delete newState[startCell]\n      } else {\n        newState[startCell] = true\n      }\n    } else {\n      newState = {}\n    }\n\n    return {\n      ...state,\n      selectedCellIds:\n        {\n          ...newState\n        } || {},\n      isSelectingCells: true,\n      startCellSelection: startCell\n    }\n  }\n\n  if (action.type === actions.cellRangeSelecting) {\n    const { selectingEndCell } = action\n    const {\n      state: { startCellSelection },\n      getCellsBetweenId\n    } = instance\n\n    // Get cells between cell ids (range)\n    let newState = getCellsBetweenId(startCellSelection, selectingEndCell)\n\n    return {\n      ...state,\n      endCellSelection: selectingEndCell,\n      currentSelectedCellIds: newState\n    }\n  }\n\n  if (action.type === actions.cellRangeSelectionEnd) {\n    const {\n      state: { selectedCellIds, currentSelectedCellIds }\n    } = instance\n\n    return {\n      ...state,\n      selectedCellIds: { ...selectedCellIds, ...currentSelectedCellIds },\n      isSelectingCells: false,\n      currentSelectedCellIds: {},\n      startCellSelection: null,\n      endCellSelection: null\n    }\n  }\n\n  if (action.type === actions.setSelectedCellIds) {\n    const selectedCellIds = functionalUpdate(\n      action.selectedCellIds,\n      state.selectedCellIds\n    )\n\n    return {\n      ...state,\n      selectedCellIds: selectedCellIds\n    }\n  }\n}\n\nfunction useInstance (instance) {\n  const { dispatch, allColumns, rows } = instance\n\n  const cellsById = {}\n  // make user control the cellIdSplitter\n  const defaultCellIdSplitBy = '_col_row_'\n  let cellIdSplitBy = instance.cellIdSplitBy || defaultCellIdSplitBy\n  Object.assign(instance, { cellIdSplitBy })\n\n  const setSelectedCellIds = React.useCallback(\n    selectedCellIds => {\n      return dispatch({\n        type: actions.setSelectedCellIds,\n        selectedCellIds\n      })\n    },\n    [dispatch]\n  )\n\n  // Returns all cells between Range ( between startcell and endcell Ids)\n  const getCellsBetweenId = React.useCallback(\n    (startCell, endCell) => {\n      if (!cellsById[startCell] || !cellsById[endCell]) {\n        console.info({ startCell, endCell })\n        throw new Error(\n          `React Table: startCellId and endCellId has to be valid cell Id`\n        )\n      }\n\n      // get rows and columns index boundaries\n      let rowsIndex = [\n        cellsById[startCell].row.index,\n        cellsById[endCell].row.index\n      ]\n      let columnsIndex = []\n      allColumns.forEach((col, index) => {\n        if (\n          col.id === cellsById[startCell].column.id ||\n          col.id === cellsById[endCell].column.id\n        ) {\n          columnsIndex.push(index)\n        }\n      })\n\n      // all selected rows and selected columns\n      const selectedColumns = []\n      const selectedRows = []\n      for (\n        let i = Math.min(...columnsIndex);\n        i <= Math.max(...columnsIndex);\n        i++\n      ) {\n        selectedColumns.push(allColumns[i].id)\n      }\n      for (let i = Math.min(...rowsIndex); i <= Math.max(...rowsIndex); i++) {\n        selectedRows.push(rows[i].id)\n      }\n\n      // select cells\n      const cellsBetween = {}\n      if (selectedRows.length && selectedColumns.length) {\n        for (let i = 0; i < selectedRows.length; i++) {\n          for (let j = 0; j < selectedColumns.length; j++) {\n            let id = selectedColumns[j] + cellIdSplitBy + selectedRows[i]\n            let cell = cellsById[id]\n            cellsBetween[cell.id] = true\n          }\n        }\n      }\n\n      return cellsBetween\n    },\n    [allColumns, cellsById, cellIdSplitBy, rows]\n  )\n\n  Object.assign(instance, {\n    getCellsBetweenId,\n    cellsById,\n    setSelectedCellIds\n  })\n}\n\nfunction prepareRow (\n  row,\n  { instance: { cellsById, cellIdSplitBy }, instance }\n) {\n  row.allCells.forEach(cell => {\n    cell.id = cell.column.id + cellIdSplitBy + row.id\n    cellsById[cell.id] = cell\n    cell.getCellRangeSelectionProps = makePropGetter(\n      instance.getHooks().getCellRangeSelectionProps,\n      { instance: instance, row, cell }\n    )\n  })\n}\n"],"names":["sum","values","aggregatedValues","reduce","next","min","forEach","value","Math","max","minMax","average","length","median","unique","Set","uniqueCount","size","count","getFirstDefined","args","i","actions","resetColumnSummary","setColumnSummary","useColumnSummary","hooks","stateReducers","push","reducer","useInstance","pluginName","defaultUserColumnSummaryFns","defaultColumnSummaryFn","state","action","previousState","instance","type","init","columnSummary","initialState","functionalUpdate","allColumns","rows","columnSummaryFns","userColumnSummaryFns","dispatch","disableColumnSummary","React","useCallback","useMemo","column","id","accessor","columnSummaryFn","hasColumnSummary","undefined","columnSummaryType","summaryFn","aggregations","columnSummaryValue","map","d","console","info","Error","data","Object","assign","defaultGetExportFileName","fileType","all","defaultGetColumnExportValue","col","name","Header","defaultGetCellExportValue","row","defaultGetExportFileBlob","useExportData","initialRows","disableExport","getExportFileName","getExportFileBlob","plugins","ensurePluginOrder","getColumnExportValue","canExport","exportValue","exportData","exportableColumns","filter","isVisible","warn","exportableRows","getCellExportValue","fileName","fileBlob","columns","downloadFileViaBlob","dataUrl","URL","createObjectURL","link","document","createElement","download","href","click","cellRangeSelectionStart","cellRangeSelecting","cellRangeSelectionEnd","setSelectedCellIds","useCellRangeSelection","getCellRangeSelectionProps","defaultgetCellRangeSelectionProps","prepareRow","props","cell","isSelectingCells","start","startCell","event","selecting","selectingEndCell","end","endCell","onMouseDown","e","persist","onMouseUp","onMouseEnter","selectedCellIds","startCellSelection","endCellSelection","currentSelectedCellIds","newState","ctrlKey","getCellsBetweenId","cellsById","defaultCellIdSplitBy","cellIdSplitBy","rowsIndex","index","columnsIndex","selectedColumns","selectedRows","cellsBetween","j","allCells","makePropGetter","getHooks"],"mappings":"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"}